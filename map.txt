package com.linjia.merchant.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.content.Context;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BaiduMap.OnMarkerClickListener;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.InfoWindow;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.Marker;
import com.baidu.mapapi.map.MarkerOptions;
import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.model.LatLng;
import com.baidu.mapapi.model.LatLngBounds;
import com.baidu.mapapi.model.LatLngBounds.Builder;
import com.baidu.mapapi.overlayutil.WalkingRouteOverlay;
import com.baidu.mapapi.search.core.SearchResult;
import com.baidu.mapapi.search.route.DrivingRouteResult;
import com.baidu.mapapi.search.route.OnGetRoutePlanResultListener;
import com.baidu.mapapi.search.route.PlanNode;
import com.baidu.mapapi.search.route.RoutePlanSearch;
import com.baidu.mapapi.search.route.TransitRouteResult;
import com.baidu.mapapi.search.route.WalkingRoutePlanOption;
import com.baidu.mapapi.search.route.WalkingRouteResult;
import com.linjia.merchant.R;
import com.nextdoor.datatype.Merchant;
import com.nextdoor.datatype.commerce.DaisongOrderItem;
import com.nextdoor.datatype.commerce.Order;
import com.nextdoor.datatype.commerce.OrderItem;
import com.nextdoor.datatype.commerce.Product;
import com.nextdoor.util.Tools;
import com.umeng.analytics.MobclickAgent;

public class OrderMapActivity extends BaseActionBarActivity implements BDLocationListener
{
	MapView mMapView = null;
	BaiduMap mBaiduMap = null;
	Order order = null;
	private LocationClient locationClient = null;
	private HashMap<Marker, Merchant> merchantMarkers;
	private Marker customerMarker;
	private Marker currentLocationMarker;
	private LatLngBounds.Builder builder;
	private List<LatLng> points;
	
	private LatLng daisongLoc;
	
	private boolean isFirstAutoZoomDone = false;
	
	private boolean isDestroyed = false;
	
	boolean isDaisong = false;
	
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		this.setBarTitle("地图");

		merchantMarkers = new HashMap<Marker, Merchant>();

		order = (Order) getIntent().getSerializableExtra("ORDER");
		isDaisong = order.getType() == order.TYPE_DAISONG;
		if(isDaisong)
		{
			if(order.getDaisongOrderItems() != null && order.getDaisongOrderItems().size() > 0)
			{
				DaisongOrderItem item = order.getDaisongOrderItems().get(0);
				daisongLoc = new LatLng(item.getDestLatitude(), item.getDestLongitude());
			}
			
		}
		setContentView(R.layout.select_location);
		mMapView = (MapView) findViewById(R.id.bmapView);

		mBaiduMap = mMapView.getMap();

		mBaiduMap.setOnMarkerClickListener(new OnMarkerClickListener()
		{
			@Override
			public boolean onMarkerClick(Marker marker)
			{
				if (marker == currentLocationMarker)
				{
					return true;
				}
				else if (marker == customerMarker)
				{
					if(isDaisong)
					{
						LatLng point = new LatLng(order.getLatitude(), order.getLongitude());
						showMarkerHint("取货地址：" + order.getCustomerAddress(), point);
						return true;
					}
					else
					{
						LatLng point = new LatLng(order.getLatitude(), order.getLongitude());
						showMarkerHint("收货地址：" + order.getCustomerAddress(), point);
						return true;
					}
				}
				else
				{
					if(isDaisong)
					{
						if(order.getDaisongOrderItems() != null && order.getDaisongOrderItems().size() > 0)
						{
							DaisongOrderItem item = order.getDaisongOrderItems().get(0);
							if(item.getDestAddress() != null)
							{
								showMarkerHint("送货地址：" + item.getDestAddress(), daisongLoc);
							}
						}
					}
					else
					{
						Merchant merchant = merchantMarkers.get(marker);
						if (merchant != null)
						{
							LatLng point = new LatLng(merchant.getLatitude(), merchant.getLongitude());
							showMarkerHint("取货商家：" + merchant.getName(), point);
						}
					}
				}
				return false;
			}
		});

		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		getSupportActionBar().setDisplayHomeAsUpEnabled(false);
		
		locationClient = Tools.getLocationClient(this);
		locationClient.start();
	}

	@Override
	public void onReceiveLocation(BDLocation location)
	{
		if (location == null || mMapView == null)
			return;
		if(this.isDestroyed)
			return;
		
		mBaiduMap.clear();
		
		merchantMarkers.clear();
		
		if(isDaisong)
		{
			builder = new Builder();
			
			points = new ArrayList<LatLng>();
			points.add(new LatLng(location.getLatitude(), location.getLongitude()));
			addCurrentLocationMarker(location);
			if (order.getLatitude() != null && order.getLongitude() != null)
			{
				addCustomerMarker(order);
				points.add(new LatLng(order.getLatitude(),order.getLongitude()));
			}	
			if(daisongLoc != null)
			{
				addDaisongMarker();
				points.add(daisongLoc);
			}
			
			LatLngBounds bounds = builder.build();
			
			MapStatusUpdate u = MapStatusUpdateFactory.newLatLngBounds(bounds);
			mBaiduMap.animateMapStatus(u);
			updateRoute(points);
		}
		else
		{
			List<Merchant> merchants = new ArrayList<Merchant>();
			builder = new Builder();
			points = new ArrayList<LatLng>();
			points.add(new LatLng(location.getLatitude(), location.getLongitude()));
			if (order.getLatitude() != null && order.getLongitude() != null)
			{
				addCustomerMarker(order);
				addCurrentLocationMarker(location);
				for (OrderItem orderItem : order.getOrderItems())
				{
					Product product = orderItem.getProduct();
					Merchant merchant = new Merchant();
					merchant.setId(product.getMerchantId());
					merchant.setName(product.getMerchantName());
					merchant.setLatitude(product.getMerchantLatitude());
					merchant.setLongitude(product.getMerchantLongitude());
					if (!merchants.contains(merchant))
					{
						points.add(new LatLng(merchant.getLatitude(),merchant.getLongitude()));
						merchants.add(merchant);
						addMerchantMarker(merchant);
					}
				}
				points.add(new LatLng(order.getLatitude(),order.getLongitude()));
			}
			for(LatLng p : points)
			{
				builder.include(p);
			}
			LatLngBounds bounds = builder.build();
			
			MapStatusUpdate u = MapStatusUpdateFactory.newLatLngBounds(bounds);
			mBaiduMap.animateMapStatus(u);
			
			updateRoute(points);
		}
	}

   private Bitmap getViewBitmap(View addViewContent) {

        addViewContent.setDrawingCacheEnabled(true);

        addViewContent.measure(
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
        addViewContent.layout(0, 0,
                addViewContent.getMeasuredWidth(),
                addViewContent.getMeasuredHeight());

        addViewContent.buildDrawingCache();
        Bitmap cacheBitmap = addViewContent.getDrawingCache();
        Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);

        return bitmap;
    }
	   
	private void updateRoute(List<LatLng> points)
	{
		if(points == null  || points.size() < 3 )
			return;
		
		updateRoute(points.get(0),points.get(1));
		updateRoute(points.get(1),points.get(points.size() -1));
	}
	   
	private void updateRoute(LatLng startPoint, LatLng endPoint)
	{
		
		RoutePlanSearch search = RoutePlanSearch.newInstance();
		
        PlanNode st = PlanNode.withLocation(startPoint);

        PlanNode ed = PlanNode.withLocation(endPoint);
        

        search.walkingSearch(new WalkingRoutePlanOption().from(st).to(ed));

        final WalkingRouteOverlay overlay = new LQWalkingRouteOverlay(
                    mBaiduMap);
        
        OnGetRoutePlanResultListener listener = new OnGetRoutePlanResultListener() 
        {
	            public void onGetWalkingRouteResult(WalkingRouteResult result) {	
	                // 获取步行线路规划结果
	            	if(isDestroyed)
	            	{
	            		return;
	            	}
	                if (result == null || result.error != SearchResult.ERRORNO.NO_ERROR) {
	                	return;
	                }
	                if (result.error == SearchResult.ERRORNO.AMBIGUOUS_ROURE_ADDR) {
	                    // 起终点或途经点地址有岐义，通过以下接口获取建议查询信息
	                    // result.getSuggestAddrInfo()	
	                    return;
	                }	
	                if (result.error == SearchResult.ERRORNO.NO_ERROR) {
	                    // route = result.getRouteLines().get(0);
	                    
	                    mBaiduMap.setOnMarkerClickListener(overlay);
	                    overlay.setData(result.getRouteLines().get(0));	
	                    overlay.addToMap();	
	                    if(!isFirstAutoZoomDone)
	                    {
	                    	overlay.zoomToSpan();
	                    	isFirstAutoZoomDone = true;
	                    	
	                    }
	                    
	                }	
	            }
	
				@Override
				public void onGetDrivingRouteResult(DrivingRouteResult arg0) {
					// TODO Auto-generated method stub
					
				}
	
				@Override
				public void onGetTransitRouteResult(TransitRouteResult arg0) {
					// TODO Auto-generated method stub
					
				}
		};
		search.setOnGetRoutePlanResultListener(listener);
	}
	
	
	
	private void showMarkerHint(String text, LatLng point)
	{
		LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		View hintView = layoutInflater.inflate(R.layout.map_hint, null);
		TextView textView = (TextView) hintView.findViewById(R.id.label);
		textView.setText(text);
		
		Bitmap map = getViewBitmap(hintView);
		
		BitmapDescriptor bitmap = BitmapDescriptorFactory.fromBitmap(map);
				
		InfoWindow.OnInfoWindowClickListener listener = new com.baidu.mapapi.map.InfoWindow.OnInfoWindowClickListener()
		{
			@Override
			public void onInfoWindowClick()
			{
				mBaiduMap.hideInfoWindow();
			}
		};
		
		InfoWindow mInfoWindow = new InfoWindow(bitmap, point, 0, listener);

		mBaiduMap.showInfoWindow(mInfoWindow);
	}

	private void addMerchantMarker(Merchant merchant)
	{
		if(!isDestroyed)
		{
			LatLng point = new LatLng(merchant.getLatitude(), merchant.getLongitude());
			BitmapDescriptor bitmap = BitmapDescriptorFactory.fromResource(R.drawable.map_location_merchant);
			OverlayOptions option = new MarkerOptions().position(point).icon(bitmap);
			Marker marker = (Marker) mBaiduMap.addOverlay(option);
			
			merchantMarkers.put(marker, merchant);
			builder.include(point);
		}
	}

	private void addDaisongMarker()
	{
		if(!isDestroyed)
		{
			BitmapDescriptor bitmap = BitmapDescriptorFactory.fromResource(R.drawable.map_location_daisong_destination);
			OverlayOptions option = new MarkerOptions().position(daisongLoc).icon(bitmap);
			Marker marker = (Marker) mBaiduMap.addOverlay(option);
			builder.include(daisongLoc);
		}
	}
	
	private void addCustomerMarker(Order order)
	{
		if(!isDestroyed)
		{
			LatLng point = new LatLng(order.getLatitude(), order.getLongitude());
			BitmapDescriptor bitmap = BitmapDescriptorFactory.fromResource(R.drawable.map_location_customer);
			OverlayOptions option = new MarkerOptions().position(point).icon(bitmap);
			Log.i("linqu-debug", " addCustomerMarker  for order " );
			customerMarker = (Marker) mBaiduMap.addOverlay(option);
			builder.include(point);
		}
	}

	private void addCurrentLocationMarker(BDLocation location)
	{
		if(!isDestroyed)
		{
			LatLng point = new LatLng(location.getLatitude(), location.getLongitude());
			BitmapDescriptor bitmap = BitmapDescriptorFactory.fromResource(R.drawable.map_location_current);
			OverlayOptions option = new MarkerOptions().position(point).icon(bitmap);
			currentLocationMarker = (Marker) mBaiduMap.addOverlay(option);
			builder.include(point);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu)
	{
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item)
	{
		switch (item.getItemId())
		{
			case android.R.id.home:
				finish();
				break;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	protected void onPause()
	{
		// MapView的生命周期与Activity同步，当activity挂起时需调用MapView.onPause()
		mMapView.onPause();
		super.onPause();
        MobclickAgent.onPageEnd("OrderMapActivity"); 
        MobclickAgent.onPause(this);
	}

	@Override
	protected void onResume()
	{
		// MapView的生命周期与Activity同步，当activity恢复时需调用MapView.onResume()
		mMapView.onResume();
		super.onResume();
        MobclickAgent.onPageStart("OrderMapActivity");
        MobclickAgent.onResume(this);  
	}


	@Override
	protected void onDestroy()
	{
		// MapView的生命周期与Activity同步，当activity销毁时需调用MapView.destroy()
		isDestroyed = true;
		if(locationClient != null)
		{
			locationClient.stop();
			locationClient.unRegisterLocationListener(this);
		}
		
		mMapView.onDestroy();
		super.onDestroy();
	}
	
	public class LQWalkingRouteOverlay extends WalkingRouteOverlay{
		
		public LQWalkingRouteOverlay(BaiduMap baiduMap) {
			super(baiduMap);
			
		}
		
		@Override
		public BitmapDescriptor getStartMarker()
		{
			BitmapDescriptor bitmap = BitmapDescriptorFactory.fromResource(R.drawable.transparent);
			return bitmap;
		}
		
		@Override
		public BitmapDescriptor getTerminalMarker()
		{
			BitmapDescriptor bitmap = BitmapDescriptorFactory.fromResource(R.drawable.transparent);
			return bitmap;
		}		
	}
}

